
/* Entry Point */
ENTRY(Reset_Handler)

/* Highest address of the user mode stack */
_estack = ORIGIN(RAM_DATA) + LENGTH(RAM_DATA) - 0x80;
/* Reserve some RAM to exchange data for bootloader */
_bootloader_data = ORIGIN(RAM_DATA) + LENGTH(RAM_DATA) - 0x7C;
/* Generate a link error if heap and stack don't fit into RAM */
_Min_Heap_Size = 0x400;   /* required amount of heap  */
_Min_Stack_Size = 0x1000; /* required amount of stack */
_Min_BL_Size = 0x80;      /* required amount of bootloader data */

/* Define output sections */
SECTIONS
{
  /* Critical program code goes into RAM_CODE */
  ram_code = LOADADDR(.ram_code);
  .ram_code :
  {
    /* Vectors must be 128 aligned*/
    . = ALIGN(128);
    ram_code_start = .;
    PROVIDE (isr_vector_table_base = .);
    KEEP(*(.isr_vector)) /* Startup code */
    *(.ram_code)
    *(.ram_code*)
    . = ALIGN(8);
    ram_code_end = .;
  } >RAM_CODE AT> FLASH_RAM_CODE

  /* The program code and other data goes into FLASH */
  .text :
  {
    . = ALIGN(8);
    *(.text)           /* .text sections (code) */
    *(.text*)          /* .text* sections (code) */
    *(.glue_7)         /* glue arm to thumb code */
    *(.glue_7t)        /* glue thumb to arm code */
    *(.eh_frame)

    . = ALIGN(8);
    KEEP (*(.init))
    KEEP (*(.fini))

    . = ALIGN(8);
    _etext = .;        /* define a global symbols at end of code */
  } >FLASH

  /* Constant data goes into FLASH */
  .rodata :
  {
    . = ALIGN(8);
    *(.rodata)         /* .rodata sections (constants, strings, etc.) */
    *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
    . = ALIGN(8);
  } >FLASH

  .ARM.extab   : { *(.ARM.extab* .gnu.linkonce.armextab.*) } >FLASH
  .ARM : {
    . = ALIGN(8);
    __exidx_start = .;
    *(.ARM.exidx*)
    __exidx_end = .;
  } >FLASH

  .preinit_array     :
  {
    . = ALIGN(8);
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    . = ALIGN(8);
    PROVIDE_HIDDEN (__preinit_array_end = .);
  } >FLASH
  .init_array :
  {
    . = ALIGN(8);
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    . = ALIGN(8);
    PROVIDE_HIDDEN (__init_array_end = .);
  } >FLASH
  .fini_array :
  {
    . = ALIGN(8);
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT(.fini_array.*)))
    KEEP (*(.fini_array*))
    . = ALIGN(8);
    PROVIDE_HIDDEN (__fini_array_end = .);
  } >FLASH

  . = ALIGN(8);
  .storage (NOLOAD):
  {
    __EEPROM_START = .;
    . = . + LENGTH(FLASH_STORAGE);
    __EEPROM_END = .;
  } > FLASH_STORAGE

  /* DMA data section */
  . = ALIGN(8);
  .dma_data (NOLOAD) :
  {
    _sdma = .;
    *(.dma_data)
    *(.dma_data*)
    _edma = .;
  } > DMA_DATA

  /* used by the startup to initialize data */
  _sidata = LOADADDR(.data);

  /* Initialized data sections goes into RAM, load LMA copy after code */
  .data :
  {
    . = ALIGN(8);
    _sdata = .;        /* create a global symbol at data start */
    *(.data)           /* .data sections */
    *(.data*)          /* .data* sections */

    . = ALIGN(8);
    _edata = .;        /* define a global symbol at data end */
  } >RAM_DATA AT> FLASH

  /* Uninitialized data section */
  . = ALIGN(8);
  .bss (NOLOAD) :
  {
    /* This is used by the startup in order to initialize the .bss secion */
    _sbss = .;         /* define a global symbol at bss start */
    __bss_start__ = _sbss;
    *(.bss)
    *(.bss*)
    *(COMMON)

    . = ALIGN(8);
    _ebss = .;         /* define a global symbol at bss end */
    __bss_end__ = _ebss;
  } >RAM_DATA

  /* User_heap_stack section, used to check that there is enough RAM left */
  ._user_heap_stack (NOLOAD) :
  {
    . = ALIGN(8);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = . + _Min_BL_Size;
    . = ALIGN(8);
  } >RAM_DATA

  /* Remove information from the standard libraries */
  /DISCARD/ :
  {
    libc.a ( * )
    libm.a ( * )
    libgcc.a ( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
}
